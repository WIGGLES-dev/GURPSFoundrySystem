declare module "gurps-foundry-roll-lib/src/js/Renderer/SuccessRollRenderer" {
    import SuccessRoll from "gurps-foundry-roll-lib/src/js/Roll/SuccessRoll";

    /**
    * Abstract class containing the core roll rendering functionality. Extended by classes intended to render specific types of rolls.
    *
    * @abstract
    * @public
    */
    abstract class AbstractRollRenderer {
        /**
        * A port of the Foundry API Roll::getTooltip method. Renders the roll "tooltip" displaying the result of each individual die.
        *
        * @public
        * @param {AbstractRoll} roll
        * @return {Promise.<HTMLElement>} Promise that resolves to HTML representing the tooltip that is toggled when the roll formula is clicked on the rendered roll. The tooltip displays the rolled value of each die in the roll.
        */
        getTooltip(roll: SuccessRoll): Promise<HTMLElement>

        /**
         * A port of the Foundry API Roll::render method. If no data and no custom template is supplied, data extracted from the passed roll object will be rendered through the `modules/GURPS-Foundry-Roll-Templates/templates/roll.html` (requiring the GURPS Foundry Roll Templates module to be installed). This template is a copy of the default Foundry roll template but with all of the fields able to render HTML.
         *
         * @public
         * @param {AbstractRoll} roll
         * @param {Object} options An object configuring the behavior of the rendered chat message.
         * @param {boolean} options.useTooltip If set to true and using the default template, clicking on the formula in the rendered roll will show a tooltip containing whatever HTML is passed under data.tooltip. If data.tooltip is not passed, the getTooltip method will be used to render the tooltip. Defaults to true.
         * @param {string} options.template Path to the template to render the roll with. This is a path relative from the Foundry VTT data folder. Defaults to `modules/GURPS-Foundry-Roll-Templates/templates/roll.html`.
         * @param {Object} data Object containing data to be rendered in the template. If no data is passed, default data is taken from the roll. The following properties are used by the default rendering template:
         * @param {String} data.user The id of the user who should be displayed as the message sender. Defaults to `game.user._id`.
         * @param {String} data.flavor Flavor text to be displayed above the roll. Defaults to null.
         * @param {String} data.formula Roll formula to display. Defaults to a value determined by a concrete renderer class.
         * @param {String} data.tooltip The tooltip to display when the roll formula is clicked in the rendered message. Defaults to HTML generated by the getTooltip method, and will only be shown if options.useTooltip is set to true.
         * @param {String} data.total The result of the roll to display. Defaults to a value determined by a concrete renderer class.
         * @return {Promise.<HTMLElement>}  A Promise which resolves to the rendered HTML representation of the roll
         */
        render(roll: SuccessRoll, options?: any, data?: any): Promise<HTMLElement>
    }

    /**
    * Class used for rendering success rolls.
    *
    * @extends AbstractRollRenderer
    * @inheritDoc
    * @public   
    */

    export default class SuccessRollRenderer extends AbstractRollRenderer {
        /**
        * Returns the face of the passed die that is considered the best possible result to be rolled. For success rolls, this is the lowest face.
        *
        * @protected
        * @param {Die} die
        * @returns {number}
        */
        _getBestDieFace(die: Die): number

        /**
        * Returns the face of the passed die that is considered the worst possible result to be rolled. For success rolls, this is the highest face.
        *
        * @protected
        * @param {Die} die
        * @returns {number}
        */
        _getWorstDieFace(die: Die): number

        /**
        * @protected
        * @param {SuccessRoll} roll
        * @returns {string|null}
        */
        _getFormula(roll: SuccessRoll): string

        /**
        * @param {SuccessRoll} roll
        * @returns {String}
        * @protected
        */
        _getTotal(roll: SuccessRoll): string
    }
}